#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#inclue <dt-bindings/zmk/bt.h>

//
/* Global settings */
//

#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

//
/* Morphs */
//

/ {
    behaviors {
        // tap: comma | shift + tap: semicolon | ctrl + shift + tap: <

        comma_morph: mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp &comma_inner_morph>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_inner_morph: mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // tap: dot | shift + tap: colon | ctrl + shift + tap: >

        dot_morph: mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp &dot_inner_morph>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_inner_morph: mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // tap: qmark | shift + tap: excl

        qmark_morph: mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp &EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: left/right parenthesis | shft + tap: less-than/greater-than

        lpar_lt: mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp &LT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_gt: mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp &RT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT>, <&kp CAPS>;
        };
    };
};

//
/* Mouse */
//

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <500>;    // 40
    delay-ms = <0>;                   // 0
};

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <40>;      // 500
    delay-ms = <0>;                   // 10
};

#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

//
/* Combos */
//

/ {
    combos {
        compatible = "zmk,combos";

        RH_BT {
            bindings = <&out OUT_BLE>;
            key-positions = <10 9 8 7>;
        };

        LH_USB {
            bindings = <&out OUT_USB>;
            key-positions = <1 2 3 4>;
        };

        CLR_BT {
            bindings = <&bt BT_CLR>;
            key-positions = <1 2 3 4 7 8 9 10>;
        };

        RH_BT1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <7 8 9 10 31>;
        };

        RH_BT2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <7 8 9 10 32>;
        };

        RH_BT3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <7 8 9 10 33>;
        };

        RH_BT4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <7 8 9 10 19>;
        };

        RH_BT0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <7 8 9 10 41>;
        };

        LH_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };

        LH_RTN {
            bindings = <&kp ENTER>;
            key-positions = <4 3>;
        };

        LH_REPEAT {
            bindings = <&key_repeat>;
            key-positions = <16 15>;
        };

        LH_TAB {
            bindings = <&kp TAB>;
            key-positions = <15 14>;
        };

        LH_CUT {
            bindings = <&kp LC(X)>;
            key-positions = <25 26>;
        };

        LH_COPY {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        LH_PASTE {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        LH_AT {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        LH_GRAVE {
            bindings = <&kp GRAVE>;
            key-positions = <14 26>;
        };

        LH_POUND {
            bindings = <&kp POUND>;
            key-positions = <15 3>;
        };

        LH_BLSH {
            bindings = <&kp BSLH>;
            key-positions = <15 27>;
        };

        LH_DLLR {
            bindings = <&kp DLLR>;
            key-positions = <4 16>;
        };

        LH_EQUAL {
            bindings = <&kp EQUAL>;
            key-positions = <16 28>;
        };

        LH_PRCNT {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        LH_TILDE {
            bindings = <&kp TILDE>;
            key-positions = <17 29>;
        };

        RH_BKSPC {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 7>;
        };

        RH_DEL {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        RH_CARET {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        RH_UNDER {
            bindings = <&kp UNDERSCORE>;
            key-positions = <18 30>;
        };

        RH_PLUS {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        RH_MINUS {
            bindings = <&kp KP_MINUS>;
            key-positions = <19 31>;
        };

        RH_ASTRK {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        RH_FLSH {
            bindings = <&kp FSLH>;
            key-positions = <32 20>;
        };

        RH_AMPS {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 21>;
        };

        RH_PIPE {
            bindings = <&kp PIPE>;
            key-positions = <21 33>;
        };

        RH_CAPS_WORD {
            bindings = <&caps_word>;
            key-positions = <41 40>;
        };

        RH_LPAR {
            bindings = <&lpar_lt>;
            key-positions = <20 19>;
        };

        RH_RPAR {
            bindings = <&rpar_gt>;
            key-positions = <20 21>;
        };

        RH_LBRC {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        RH_RBRC {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
        };

        RH_ENTER {
            bindings = <&kp ENTER>;
            key-positions = <21 20 19>;
        };

        LH_LAYER4 {
            bindings = <&mo 4>;
            key-positions = <38 37>;
        };

        RH_SCRL_LEFT {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <41 18 30>;
        };

        RH_SCRL_DOWN {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <41 19 31>;
        };

        RH_SCRL_UP {
            bindings = <&msc SCRL_UP>;
            key-positions = <41 20 32>;
        };

        RH_SCRL_RIGHT {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <41 21 33>;
        };
    };

    //
    /* Keymap */
    //

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp TAB       &kp Q           &kp W  &kp E             &kp R                &kp T         &kp Y            &kp U        &kp I        &kp O         &kp P             &kp BACKSPACE
&kp LEFT_GUI  &kp A           &kp S  &kp D             &kp F                &kp G         &kp H            &kp J        &kp K        &kp L         &dot_morph        &qmark_morph
&kp CAPS      &kp LEFT_SHIFT  &kp Z  &kp X             &kp C                &kp V         &kp B            &kp N        &kp M        &comma_morph  &kp SINGLE_QUOTE  &kp RETURN
                                     &mt LCTRL ESCAPE  &mt LEFT_ALT RETURN  &lt 3 DELETE  &lt 1 BACKSPACE  &lt 2 SPACE  &shift_caps
            >;
        };

        layer_1 {
            bindings = <
&none  &none  &none  &none   &none   &none   &kp PLUS   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp ASTERISK  &none
&none  &none  &none  &none   &none   &none   &none      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &dot_morph    &none
&none  &none  &none  &none   &none   &none   &kp MINUS  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp FSLH      &none
                     &trans  &trans  &trans  &trans     &trans           &kp KP_NUMBER_0
            >;
        };

        layer_2 {
            bindings = <
&none  &none  &none  &none   &none   &none   &none   &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &none  &none  &none   &none   &none   &none   &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &none  &none  &none   &none   &none   &none   &kp F1  &kp F2  &kp F3  &kp F12  &none
                     &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&none  &none  &none  &none   &none   &none   &kp C_REWIND  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_FAST_FORWARD  &kp C_MUTE  &none
&none  &none  &none  &none   &none   &none   &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT           &kp C_PP    &none
&none  &none  &none  &none   &none   &none   &kp HOME      &kp PG_DN     &kp PG_UP     &kp END             &none       &none
                     &trans  &trans  &trans  &trans        &trans        &trans
            >;
        };

        layer_4 {
            bindings = <
&kp GRAVE  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)   &kp LS(AMPS)    &kp LS(STAR)  &kp LS(LPAR)     &kp LS(RPAR)  &kp LS(UNDER)
&none      &none         &none       &none          &none         &none          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none         &none
&none      &none         &none       &none          &none         &none          &none           &none           &none         &none            &none         &none
                                     &trans         &trans        &trans         &mkp LCLK       &mkp RCLK       &mkp MCLK
            >;
        };
    };
};
